import java.util.HashMap;
// https://leetcode.com/problems/minimize-malware-spread/description/
// complexity: n^2 
class Solution {
    class UnionFind {
        int[] parent;
        int[] size;

        UnionFind(int[] parent, int[] size) {
            this.parent = parent;
            this.size = size;
        }

        public int find(int node) {
            if (parent[node] == node) {
                return node;
            }

            parent[node] = find(parent[node]);
            return parent[node];
        }

        public void union(int node_1, int node_2) {
            int parent_1 = find(node_1);
            int parent_2 = find(node_2);

            if (parent_1 == parent_2) {
                return;
            }

            if (size[parent_1] > size[parent_2]) {
                parent[parent_2] = parent_1;
                size[parent_1] += size[parent_2];
            } else {
                parent[parent_1] = parent_2;
                size[parent_2] += size[parent_1];
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {

        int[] parent = new int[graph.length];
        int[] size = new int[graph.length];
        for (int index = 0; index < graph.length; index++) {
            parent[index] = index;
            size[index] = 1;
        }
        UnionFind uf = new UnionFind(parent, size);

        for (int row = 0; row < graph.length; row++) {
            for (int col = 0; col < graph[0].length; col++) {
                if (row != col && graph[row][col] == 1) {
                    if (uf.find(row) != uf.find(col)) {
                        uf.union(row, col);
                    }
                }
            }
        }
        // if no of infected nodes are more than 1 in a component, no benefit of fixing
        // that.
        HashMap<Integer, Integer> noOfInfectedNodesInGroup = new HashMap<>();
        for (int node : initial) {
            int leader = uf.find(node);
            noOfInfectedNodesInGroup.putIfAbsent(leader, 0);
            noOfInfectedNodesInGroup.put(leader, noOfInfectedNodesInGroup.get(leader) + 1);
        }

        int maxSizeNode = -1;
        int maxSize = Integer.MIN_VALUE;
        int minOfNodes = Integer.MAX_VALUE;
        for (int node : initial) {
            int leader = uf.find(node);
            if (noOfInfectedNodesInGroup.get(leader) != 1) {
                minOfNodes = Math.min(minOfNodes, node);
                continue;
            }

            if (size[leader] > maxSize) {
                maxSize = size[leader];
                maxSizeNode = node;
            } else if (size[leader] == maxSize) {
                maxSizeNode = Math.min(node, maxSizeNode);
            }
        }
        return maxSizeNode == -1 ? minOfNodes : maxSizeNode;
    }
}